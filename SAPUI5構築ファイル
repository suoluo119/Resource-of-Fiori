Bootstrapとは

Before we can do something with SAPUI5 , we need to load and initialize it.
This process of loading and initializing SAPUI5 is called bootstrapping .


Bootstrapは一般的には以下のように定義されています。
電源投入後あるいはリセットの後に、コンピューター上のメモリーに基本的なソフトウェアを読み込むことを指す。
出典: フリー百科事典『ウィキペディア（Wikipedia）』

SAPUI5では、ページが開かれたとき、最初にSAPUI5のライブラリやテーマなどを読み込むスクリプトのことを指します。
SAPUI5のアプリケーションとして動かすために必須なのですね。
（Bootstrapという名前のフレームワークがありますがそれとは別物です）


Bootstrapの中身
項目                          指定するもの
id                            固定値 "sap-ui-bootstrap"
src                           SAPUI5 coreライブラリが格納されている場所
data-sap-ui-theme             UIのテーマ
data-sap-ui-libs              ページで使用するUIのライブラリ
data-sap-ui-compatVersion     "edge"を指定すると、SAPUI5の最新機能が使える（任意指定）
data-sap-ui-preload           ライブラリを同期で読み込むか(sync)、非同期で読み込むか(async)を指定する。
                              パフォーマンス向上のためasyncを指定することが推奨されている
                              
                              
Component.jsとmanifest.jsonの役割は？

ファイル                      役割
index.html                    Bootstrapの定義、コンテンツを配置する場所(body)の定義
Component.js                  初期処理の定義
manifest.json                 ライブラリのバージョン、モデルなど、アプリケーションに必要な設定を定義


App Overview: The Basic Files of Your App
https://sapui5.hana.ondemand.com/#/topic/28b59ca857044a7890a22aec8cf1fee9
↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
We recommend creating at least three files for your app: 
the descriptor( manifest.json ), the component ( Component.js ),and the main view of the app ( App.view.xml ).

Descriptor (manifest.json)

We recommend that you use the manifest.json file to configure the app settings and put all important information 
needed to run the app in there. Using this approach means you need to write less application code, 
and you can already access the information before the app is instantiated.
Some attributes in the descriptor are just for information purposes, such as the minimum SAPUI5 version (minUI5version), 
others help external components (for example the SAP Fiori launchpad (FLP)) to integrate the application correctly, 
but most of the attributes are actually used to configure specific aspects of the app that are needed frequently.

The most important configuration settings are:

Models. Examples of models are the configuration of the OData service (default model) and 
language files (i18n model). All models described in the manifest.json file are automatically 
instantiated when the app is started.

Libraries and components that are used in the app and have to be loaded during app initialization.

The root view of your application.

Routing configuration that defines the navigation between views.

Root View (App.view.xml)

The App.view.xml file defines the root view of the app. In most cases, it contains an App control or 
a SplitApp control as a root control.

SAPUI5 supports multiple view types (XML, HTML, JavaScript, JSON). We recommend using XML views, 
as for these you have to separate the controller logic from the view definition in a controller file (for example App.controller.js).

We also recommend creating a separate view file for each view you want to use in your app.

Component (Component.js)

The Component.js file holds the app setup. The init function of the component is automatically started by SAPUI5 
when the component is instantiated.

Caution
Your component extends UIComponent. If you are overriding the init function of your component,
you have to make sure that you call the init function of UIComponent and initialize the router afterwards.

In the metadata section of the component, you define a reference to the descriptor file. When the component is instantiated, 
the descriptor is loaded and parsed automatically.

デバッグツールで見てみると、index.html⇒Component.js⇒manifest.jsonの順に呼ばれていることがわかります。
一方、Fiori Launchpadから実行する場合はindex.htmlは使用せずにComponent.jsが直接呼ばれるそうです。
（つまり、Component.jsが必須ということ）

sap.m.Shell デバイスに合わせて幅を自動調整することができます。
sap.m.App   画面を遷移することを提供して、アプリのヘッダ情報をセットする
